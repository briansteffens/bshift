runners:
 - basm
 - nasm

cases:
 - name: "allocate memory, write to it, and read from it"
   test: allocate

   status: 137

 - name: get different addresses for separate allocations
   test: separate_allocations

   status: 1

 - name: get the same address for same size allocation after free
   test: free_same_size

   status: 13

 - name: allocate more than the standard region size
   test: allocate_large

   status: 7

 - name: "allocations are aligned to 16-byte boundaries"
   test: allocate_alignment

   status: 1

 - name: data is preserved after reallocation to larger size
   test: reallocate_larger

   status: 1

 - name: same pointer returned after reallocation to smaller size
   test: reallocate_smaller

   status: 1

 - name: free absorbs previous adjacent free block
   test: free_previous

   status: 1

 - name: free absorbs next adjacent free block
   test: free_next

   status: 1

 - name: free always keeps at least one region mapped
   test: free_minimum_one_region

   status: 1

 - name: "free unmaps regions that aren't needed anymore"
   test: free_unmap

   status: 1

 - name: super region grows if enough regions are mapped
   test: grow_super_region

   status: 1


templates:
 - test.bs: |

    import heap;

    u64 test_allocate()
    {
        u64* a = heap::allocate(8);

        *a = 137;

        return *a;
    }

    u64 test_separate_allocations()
    {
        u64* a = heap::allocate(8);
        u64* b = heap::allocate(8);

        return a != b;
    }

    u64 test_allocate_large()
    {
        u8* a = heap::allocate(8192);

        *a = 3;

        a = a + 8184;

        *a = 7;

        return *a;
    }

    u64 test_allocate_alignment()
    {
        u8* a = heap::allocate(3);
        u8* b = heap::allocate(7);

        return b % 16 == 0;
    }

    u64 test_reallocate_larger()
    {
        u64* a = heap::allocate(8);

        *a = 123;

        a = heap::reallocate((u8*)a, 16);

        return *a == 123;
    }

    u64 test_reallocate_smaller()
    {
        u64* a = heap::allocate(16);

        *a = 123;

        u64* b = heap::reallocate((u8*)a, 8);

        return a == b;
    }

    u64 test_free_same_size()
    {
        u64* a = heap::allocate(8);

        *a = 13;

        heap::free((u8*)a);

        u64* b = heap::allocate(8);

        return *b;
    }

    u64 test_free_previous()
    {
        u64* a = heap::allocate(8);
        u64* b = heap::allocate(8);

        heap::free((u8*)a);
        heap::free((u8*)b);

        u64* c = heap::allocate(16);

        return a == c;
    }

    u64 test_free_next()
    {
        u64* a = heap::allocate(8);
        u64* b = heap::allocate(8);

        heap::free((u8*)b);
        heap::free((u8*)a);

        u64* c = heap::allocate(16);

        return a == c;
    }

    u64 test_free_minimum_one_region()
    {
        u64* a = heap::allocate(8);

        heap::free((u8*)a);

        return heap::__debug_region_count() == 1;
    }

    u64 test_free_unmap()
    {
        u64* a = heap::allocate(2048);
        u64* b = heap::allocate(2048);

        if (heap::__debug_region_count() != 2)
        {
            return 10;
        }

        heap::free((u8*)b);

        return heap::__debug_region_count() == 1;
    }

    u64 test_grow_super_region()
    {
        u64 original_super_region_size = heap::__debug_super_region_size();
        u64 max = 300;

        while (max > 0)
        {
            heap::allocate(2048);

            if (heap::__debug_super_region_size() > original_super_region_size)
            {
                return 1;
            }

            max = max - 1;
        }

        return 0;
    }

    u64 main()
    {
        return test_{{ test }}();
    }
