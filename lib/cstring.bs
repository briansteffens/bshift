u64 length(u8* str)
{
    u64 ret = 0;

    while (*str != 0)
    {
        str = str + 1;
        ret = ret + 1;
    }

    return ret;
}

u8* find(u8* haystack, u8* needle)
{
    while (*haystack != 0)
    {
        u8* h = haystack;
        u8* n = needle;

        bool match = true;
        bool first = true;

        while (*h != 0 && *n != 0)
        {
            first = false;

            if (*h != *n)
            {
                match = false;
            }

            h = h + 1;
            n = n + 1;
        }

        if (match == true && first == false)
        {
            return haystack;
        }

        haystack = haystack + 1;
    }

    return 0;
}

bool compare(u8* source, u8* destination)
{
    while (*source != 0 && *destination != 0)
    {
        if (*source != *destination)
        {
            return false;
        }

        source = source + 1;
        destination = destination + 1;
    }

    return *source == 0 && *destination == 0;
}

u64 copy(u8* source, u8* destination)
{
    while (*source != 0)
    {
        *destination = *source;

        source = source + 1;
        destination = destination + 1;
    }

    return 0;
}

u64 copy_limit(u8* source, u8* destination, u64 count)
{
    u64 copied = 0;

    while (*source != 0 && copied < count)
    {
        *destination = *source;

        source = source + 1;
        destination = destination + 1;
        copied = copied + 1;
    }

    return copied;
}

u64 reverse(u8* str)
{
    u64 len = length(str);
    u64 midpoint = str + len / 2;

    u8* end = str + len - 1;

    while (str != midpoint)
    {
        u8 temp = *str;
        *str = *end;
        *end = temp;

        str = str + 1;
        end = end - 1;
    }

    return 0;
}

u64 from_u64(u64 source, u8* destination)
{
    if (source == 0)
    {
        *destination = 48;
        destination = destination + 1;
        *destination = 0;

        return 1;
    }

    u8* output = destination;
    u64 digits = 0;

    while (source > 0)
    {
        u8 digit = source % 10 + 48;
        source = source / 10;

        *output = digit;
        output = output + 1;
        digits = digits + 1;
    }

    *output = 0;

    reverse(destination);

    return digits;
}

// TODO: add multiplication operator
u64 multiply(u64 a, u64 b)
{
    u64 ret = a;

    while (b > 1)
    {
        ret = ret + a;
        b = b - 1;
    }

    return ret;
}

bool to_u64(u8* source, u64* destination)
{
    u64 ret = 0;

    if (*source == 0)
    {
        return false;
    }

    while (*source != 0)
    {
        if (ret != 0)
        {
            ret = multiply(ret, 10);
        }

        u8 character = *source;
        character = character - '0';

        if (character < 0)
        {
            return false;
        }

        if (character > 9)
        {
            return false;
        }

        ret = ret + (u64)character;

        source = source + 1;
    }

    *destination = ret;
    return true;
}
