import heap;
import memory;

struct vector<T>
{
    T* data;
    u64 allocated;
    u64 length;
}

void vector::init()
{
    this.length = 0;
    this.allocated = 8;
    this.data = heap::allocate(sizeof(T) * this.allocated);
}

void vector::add(T item)
{
    // Double the array size if we're out of space
    if (this.length >= this.allocated)
    {
        this.allocated = this.allocated * 2;
        this.data = heap::reallocate(this.data, sizeof(T) * this.allocated);
    }

    this.data[this.length] = item;
    this.length = this.length + 1;
}

T vector::get(u64 index)
{
    return this.data[index];
}

void vector::destruct()
{
    heap::free(this.data);
}
